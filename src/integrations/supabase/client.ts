// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database, Profile, Video } from './types';

const SUPABASE_URL = "https://nlyglhcijrjgbacubniw.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5seWdsaGNpanJqZ2JhY3Vibml3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAzNDExMDksImV4cCI6MjA2NTkxNzEwOX0.09xXFlmxsrJILEDUN8RzTkfD_6TJXH3SRkozTAEQi5k";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Funciones para manejar perfiles de usuario

/**
 * Obtiene el perfil de un usuario por su id
 */
export async function getProfileById(id: string): Promise<Profile | null> {
  const { data, error } = await supabase
    .from('profiles')
    .select('*')
    .eq('id', id)
    .single();
  if (error) return null;
  return data as Profile;
}

/**
 * Crea un nuevo perfil de usuario
 */
export async function createProfile(profile: Omit<Profile, 'created_at' | 'updated_at'>): Promise<Profile | null> {
  const { data, error } = await supabase
    .from('profiles')
    .insert([profile])
    .select()
    .single();
  if (error) return null;
  return data as Profile;
}

/**
 * Actualiza un perfil de usuario
 */
export async function updateProfile(id: string, updates: Partial<Profile>): Promise<Profile | null> {
  const { data, error } = await supabase
    .from('profiles')
    .update(updates)
    .eq('id', id)
    .select()
    .single();
  if (error) return null;
  return data as Profile;
}

/**
 * Sube un archivo a Supabase Storage
 */
export async function uploadFileToStorage(bucket: string, path: string, file: File) {
  const { data, error } = await supabase.storage.from(bucket).upload(path, file, {
    cacheControl: '3600',
    upsert: true,
  });
  if (error) throw error;
  return data;
}

/**
 * Crea un nuevo video
 */
export async function createVideo(video: Omit<Video, 'id' | 'created_at' | 'updated_at'>): Promise<Video | null> {
  const { data, error } = await supabase
    .from('videos')
    .insert([video])
    .select()
    .single();
  if (error) return null;
  return data as Video;
}

/**
 * Obtiene todos los videos
 */
export async function getVideos(publishedOnly = true): Promise<Video[]> {
  let query = supabase.from('videos').select('*').order('created_at', { ascending: false });
  if (publishedOnly) query = query.eq('is_published', true);
  const { data, error } = await query;
  if (error) return [];
  return data as Video[];
}

/**
 * Actualiza un video
 */
export async function updateVideo(id: string, updates: Partial<Video>): Promise<Video | null> {
  const { data, error } = await supabase
    .from('videos')
    .update(updates)
    .eq('id', id)
    .select()
    .single();
  if (error) return null;
  return data as Video;
}